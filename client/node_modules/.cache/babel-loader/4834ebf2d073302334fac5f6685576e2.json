{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ricky\\\\Documents\\\\CS Stuff\\\\Projects\\\\RideBuddies\\\\client\\\\src\\\\components\\\\pages\\\\map.component.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { GoogleMap, Marker, InfoWindow, LoadScript } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport compass from \"../../img/compass.svg\";\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\"\n};\nconst center = {\n  lat: 37.774929,\n  lng: -122.419418\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst libraries = [\"places\"];\n\nconst PlacesAutocomplete = props => {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 37.774929,\n        lng: () => -122.419418\n      },\n      radius: 200 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        props.panTo({\n          lat,\n          lng\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disabled: !ready,\n    placeholder: \"Enter an address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nconst Locate = props => {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        props.panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: compass,\n    alt: \"compass - locate me\",\n    style: {\n      width: \"40px\",\n      height: \"40px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }));\n};\n\nclass RideMap extends Component {\n  constructor(props) {\n    super(props);\n    this.onMapLoad = this.onMapLoad.bind(this);\n    this.panTo = this.panTo.bind(this);\n    this.state = {\n      selected: null,\n      map: {},\n      rides: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/api/rides').then(response => {\n      this.setState({\n        rides: response.data\n      });\n    }).catch(error => console.log(error));\n  }\n\n  onMapLoad(map) {\n    this.setState({\n      map: map\n    });\n  }\n\n  panTo({\n    lat,\n    lng\n  }) {\n    this.state.map.panTo({\n      lat,\n      lng\n    });\n    this.state.map.setZoom(14);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LoadScript, {\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n      libraries: libraries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n      panTo: this.panTo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Locate, {\n      panTo: this.panTo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }, \"Rides\"), /*#__PURE__*/React.createElement(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 8,\n      center: center,\n      options: options,\n      onLoad: this.onMapLoad,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, this.state.rides.map(currRide => /*#__PURE__*/React.createElement(Marker, {\n      key: currRide.id,\n      position: {\n        lat: currRide.pick_lat,\n        lng: currRide.pick_lng\n      },\n      onClick: () => this.setState({\n        selected: currRide\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 29\n      }\n    })), this.state.selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: this.state.selected.pick_lat,\n        lng: this.state.selected.pick_lng\n      },\n      onCloseClick: () => this.setState({\n        selected: null\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 33\n      }\n    }, this.state.selected.group_Name), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 33\n      }\n    }, this.state.selected.location), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 33\n      }\n    }, this.state.selected.seats), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 33\n      }\n    }, \"Departure: \", this.state.selected.date, this.state.selected.time))) : null)));\n  }\n\n}\n\nexport default RideMap;","map":{"version":3,"sources":["C:/Users/Ricky/Documents/CS Stuff/Projects/RideBuddies/client/src/components/pages/map.component.js"],"names":["React","Component","axios","GoogleMap","Marker","InfoWindow","LoadScript","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","mapContainerStyle","height","width","center","lat","lng","options","disableDefaultUI","zoomControl","libraries","PlacesAutocomplete","props","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","radius","address","results","panTo","err","console","log","e","target","map","id","description","Locate","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","compass","RideMap","constructor","onMapLoad","bind","state","selected","rides","componentDidMount","get","then","response","setState","catch","error","setZoom","render","process","env","REACT_APP_GOOGLE_KEY","currRide","pick_lat","pick_lng","group_Name","seats","date","time"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    GoogleMap,\r\n    Marker,\r\n    InfoWindow,\r\n    LoadScript,\r\n}from \"@react-google-maps/api\";\r\n\r\nimport usePlacesAutocomplete,{\r\n    getGeocode,\r\n    getLatLng,\r\n} from \"use-places-autocomplete\";\r\n\r\nimport {\r\n    Combobox,\r\n    ComboboxInput,\r\n    ComboboxPopover,\r\n    ComboboxList,\r\n    ComboboxOption,\r\n  } from \"@reach/combobox\";\r\n  import \"@reach/combobox/styles.css\";\r\n\r\n\r\nimport compass from \"../../img/compass.svg\";\r\nconst mapContainerStyle = {\r\n    height: \"100vh\",\r\n    width: \"100vw\",\r\n}\r\n\r\nconst center = {\r\n    lat:37.774929,\r\n    lng:-122.419418,\r\n}\r\n\r\nconst options = {\r\n    disableDefaultUI:true,\r\n    zoomControl:true,\r\n}\r\n\r\nconst libraries = [\"places\"];\r\n\r\nconst PlacesAutocomplete  = props =>{\r\n    const{\r\n        ready,\r\n        value,\r\n        suggestions:{status,data},\r\n        setValue,\r\n        clearSuggestions,\r\n    } = usePlacesAutocomplete({\r\n        requestOptions:{\r\n            location:{ lat:()=>37.774929,lng:()=>-122.419418},\r\n            radius:200*1000,\r\n        },\r\n    });\r\n    return (\r\n        <div className='search'>\r\n            <Combobox onSelect={ async (address)=>{\r\n                setValue(address,false);\r\n                clearSuggestions();\r\n\r\n                try{\r\n                    const results = await getGeocode({address});\r\n                    const {lat, lng} = await getLatLng(results[0]);\r\n                    props.panTo({lat,lng});\r\n                }catch(err){\r\n                    console.log(err);\r\n                }\r\n                \r\n                }}>\r\n                <ComboboxInput \r\n                    value={value} \r\n                    onChange={(e)=>{setValue(e.target.value);}} \r\n                    disabled={!ready}\r\n                    placeholder=\"Enter an address\"\r\n                    />\r\n                    <ComboboxPopover>\r\n                        <ComboboxList>\r\n                        {status===\"OK\" && data.map(({id,description})=>(\r\n                            <ComboboxOption key={id} value={description}/>\r\n                        ))}\r\n                       </ComboboxList>\r\n                    </ComboboxPopover>\r\n            </Combobox>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nconst Locate  = props =>{\r\n   return <button className=\"locate\" onClick={()=>{\r\n       navigator.geolocation.getCurrentPosition((\r\n            position)=>{\r\n                props.panTo({\r\n                    lat: position.coords.latitude,\r\n                    lng:position.coords.longitude\r\n                });\r\n            }\r\n            ,()=>null\r\n        );\r\n   }}>\r\n            <img src={compass} alt=\"compass - locate me\" style={{width:\"40px\", height:\"40px\"}}></img>\r\n          </button>\r\n}\r\nclass RideMap extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.onMapLoad = this.onMapLoad.bind(this);\r\n        this.panTo = this.panTo.bind(this);\r\n        this.state = {\r\n                        selected:null,\r\n                        map:{},\r\n                        rides:[],\r\n                    };\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('/api/rides')\r\n            .then(response =>{this.setState({rides: response.data});\r\n            })\r\n            .catch((error)=> console.log(error));\r\n    }\r\n\r\n    onMapLoad(map){\r\n        this.setState({\r\n            map:map\r\n        })\r\n    }\r\n\r\n  \r\n\r\n   panTo({lat,lng}){\r\n        this.state.map.panTo({lat,lng});\r\n        this.state.map.setZoom(14);\r\n   }\r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <LoadScript \r\n                    googleMapsApiKey={process.env.REACT_APP_GOOGLE_KEY}\r\n                    libraries={libraries}\r\n                >\r\n                    <PlacesAutocomplete panTo={this.panTo}/>\r\n                    <Locate panTo={this.panTo}/>\r\n\r\n                    <h2>Rides</h2>\r\n                    <GoogleMap mapContainerStyle={mapContainerStyle} \r\n                        zoom={8}\r\n                        center={center}\r\n                        options={options}\r\n                        onLoad={this.onMapLoad}\r\n                    >\r\n                        {this.state.rides.map(currRide => \r\n                            <Marker key={currRide.id} \r\n                                    position={{lat:currRide.pick_lat,lng:currRide.pick_lng}}\r\n                                    onClick={()=>this.setState({selected:currRide})}\r\n                                    />)}\r\n                        {this.state.selected? \r\n                        (<InfoWindow \r\n                            position={{lat:this.state.selected.pick_lat,lng:this.state.selected.pick_lng}} \r\n                            onCloseClick={()=>this.setState({selected:null})}>\r\n                            <div>\r\n                                <h3>{this.state.selected.group_Name}</h3>\r\n                                <h4>{this.state.selected.location}</h4>\r\n                                <h4>{this.state.selected.seats}</h4>\r\n                                <h4>Departure: {this.state.selected.date}{this.state.selected.time}</h4>\r\n                                \r\n                            </div>\r\n                        </InfoWindow>):null}\r\n                    </GoogleMap>\r\n                </LoadScript>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default RideMap;"]},"metadata":{},"sourceType":"module"}