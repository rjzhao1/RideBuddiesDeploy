{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ricky\\\\Documents\\\\CS Stuff\\\\Projects\\\\RideBuddies\\\\client\\\\src\\\\components\\\\pages\\\\map.component.js\";\nimport React, { Component } from 'react';\nimport { GoogleMap, Marker, InfoWindow, LoadScript } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport Search from 'antd/lib/input/Search';\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\"\n};\nconst center = {\n  lat: 37.774929,\n  lng: -122.419418\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst libraries = [\"places\"];\n\nconst PlacesAutocomplete = () => {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestion\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 37.774929,\n        lng: () => -122.419418\n      },\n      radius: 200 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n      } catch (err) {\n        console.log(\"errors!\");\n      }\n\n      console.log(address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disabled: !ready,\n    placeholder: \"Enter an address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 29\n    }\n  })))));\n};\n\nclass RideMap extends Component {\n  constructor(props) {\n    super(props);\n    this.setMarker = this.setMarker.bind(this);\n    this.mapRef = React.createRef();\n    this.state = {\n      markers: [],\n      selected: null\n    };\n  }\n\n  setMarker(e) {\n    const lat = e.latLng.lat();\n    const lng = e.latLng.lng();\n    this.setState({\n      markers: [...this.state.markers, {\n        lat: lat,\n        lng: lng,\n        time: new Date()\n      }]\n    });\n  }\n\n  panTo({\n    lat,\n    lng\n  }) {\n    this.mapRef.panTo({\n      lat,\n      lng\n    });\n    this.mapRef.setZoom(14);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LoadScript, {\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n      libraries: libraries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n      panTo: this.panTo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, \"Rides\"), /*#__PURE__*/React.createElement(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 8,\n      center: center,\n      options: options,\n      onClick: event => this.setMarker(event),\n      ref: this.mapRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, this.state.markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n      key: marker.time.toISOString(),\n      position: {\n        lat: marker.lat,\n        lng: marker.lng\n      },\n      onClick: () => this.setState({\n        selected: marker\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    })), this.state.selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: this.state.selected.lat,\n        lng: this.state.selected.lng\n      },\n      onCloseClick: this.setState({\n        selected: null\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 33\n      }\n    }, \"Rides Here\"))) : null)));\n  }\n\n}\n\nexport default RideMap;","map":{"version":3,"sources":["C:/Users/Ricky/Documents/CS Stuff/Projects/RideBuddies/client/src/components/pages/map.component.js"],"names":["React","Component","GoogleMap","Marker","InfoWindow","LoadScript","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","Search","mapContainerStyle","height","width","center","lat","lng","options","disableDefaultUI","zoomControl","libraries","PlacesAutocomplete","ready","value","suggestions","status","data","setValue","clearSuggestion","requestOptions","location","radius","address","results","panTo","err","console","log","e","target","map","id","description","RideMap","constructor","props","setMarker","bind","mapRef","createRef","state","markers","selected","latLng","setState","time","Date","setZoom","render","process","env","REACT_APP_GOOGLE_KEY","event","marker","toISOString"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport {\r\n    GoogleMap,\r\n    Marker,\r\n    InfoWindow,\r\n    LoadScript,\r\n}from \"@react-google-maps/api\";\r\n\r\nimport usePlacesAutocomplete,{\r\n    getGeocode,\r\n    getLatLng,\r\n} from \"use-places-autocomplete\";\r\n\r\nimport {\r\n    Combobox,\r\n    ComboboxInput,\r\n    ComboboxPopover,\r\n    ComboboxList,\r\n    ComboboxOption,\r\n  } from \"@reach/combobox\";\r\n  import \"@reach/combobox/styles.css\";\r\nimport Search from 'antd/lib/input/Search';\r\n\r\nconst mapContainerStyle = {\r\n    height: \"100vh\",\r\n    width: \"100vw\",\r\n}\r\n\r\nconst center = {\r\n    lat:37.774929,\r\n    lng:-122.419418,\r\n}\r\n\r\nconst options = {\r\n    disableDefaultUI:true,\r\n    zoomControl:true,\r\n}\r\n\r\nconst libraries = [\"places\"];\r\n\r\nconst PlacesAutocomplete  = () =>{\r\n    const{\r\n        ready,\r\n        value,\r\n        suggestions:{status,data},\r\n        setValue,\r\n        clearSuggestion,\r\n    } = usePlacesAutocomplete({\r\n        requestOptions:{\r\n            location:{ lat:()=>37.774929,lng:()=>-122.419418},\r\n            radius:200*1000,\r\n        },\r\n    });\r\n    return (\r\n        <div className='search'>\r\n            <Combobox onSelect={ async (address)=>{\r\n                try{\r\n                    const results = await getGeocode({address});\r\n                    const {lat, lng} = await getLatLng(results[0]);\r\n                    panTo({lat,lng});\r\n                }catch(err){\r\n                    console.log(\"errors!\");\r\n                }\r\n                console.log(address);\r\n                \r\n                }}>\r\n                <ComboboxInput \r\n                    value={value} \r\n                    onChange={(e)=>{setValue(e.target.value);}} \r\n                    disabled={!ready}\r\n                    placeholder=\"Enter an address\"\r\n                    />\r\n                    <ComboboxPopover>\r\n                        {status===\"OK\" && data.map(({id,description})=>(\r\n                            <ComboboxOption key={id} value={description}/>\r\n                        ))}\r\n                    </ComboboxPopover>\r\n            </Combobox>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nclass RideMap extends Component{\r\n    \r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.setMarker = this.setMarker.bind(this);\r\n        this.mapRef = React.createRef();\r\n        this.state = {\r\n                        markers:[],\r\n                        selected:null,\r\n                    };\r\n    }\r\n\r\n    setMarker(e){\r\n        const lat = e.latLng.lat();\r\n        const lng = e.latLng.lng();\r\n        \r\n        this.setState({\r\n            markers:[...this.state.markers,{\r\n                        lat:lat,\r\n                        lng:lng,\r\n                        time: new Date()}]\r\n        })\r\n        \r\n    }\r\n   panTo({lat,lng}){\r\n        this.mapRef.panTo({lat,lng});\r\n        this.mapRef.setZoom(14);\r\n   }\r\n    render(){\r\n        \r\n        return(\r\n            <div >\r\n                <LoadScript \r\n                    googleMapsApiKey={process.env.REACT_APP_GOOGLE_KEY}\r\n                    libraries={libraries}\r\n                >\r\n                    <PlacesAutocomplete panTo={this.panTo}/>\r\n                    <h2>Rides</h2>\r\n                    <GoogleMap mapContainerStyle={mapContainerStyle} \r\n                        zoom={8}\r\n                        center={center}\r\n                        options={options}\r\n                        onClick={event=>this.setMarker(event)}\r\n                        ref={this.mapRef}\r\n                    >\r\n                        {this.state.markers.map(marker => \r\n                            <Marker key={marker.time.toISOString()} \r\n                                    position={{lat:marker.lat,lng:marker.lng}}\r\n                                    onClick={()=>this.setState({selected:marker})}\r\n                                    />)}\r\n                        {this.state.selected? \r\n                        (<InfoWindow \r\n                            position={{lat:this.state.selected.lat,lng:this.state.selected.lng}} \r\n                            onCloseClick={this.setState({selected:null})}>\r\n                            <div>\r\n                                <h3>Rides Here</h3>\r\n                            </div>\r\n                        </InfoWindow>):null}\r\n                    </GoogleMap>\r\n                </LoadScript>\r\n            </div>\r\n           \r\n            \r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default RideMap;"]},"metadata":{},"sourceType":"module"}