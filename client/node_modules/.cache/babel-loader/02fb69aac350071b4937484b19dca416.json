{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ricky\\\\Documents\\\\CS Stuff\\\\Projects\\\\RideBuddies\\\\client\\\\src\\\\components\\\\pages\\\\map.component.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { GoogleMap, Marker, InfoWindow, LoadScript } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport compass from \"../../img/compass.svg\";\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\"\n};\nconst center = {\n  lat: 37.774929,\n  lng: -122.419418\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst libraries = [\"places\"]; // const PlacesAutocomplete  = props =>{\n//     const{\n//         ready,\n//         value,\n//         suggestions:{status,data},\n//         setValue,\n//         clearSuggestions,\n//     } = usePlacesAutocomplete({\n//         requestOptions:{\n//             location:{ lat:()=>37.774929,lng:()=>-122.419418},\n//             radius:200*1000,\n//         },\n//     });\n//     return (\n//         <div className='search'>\n//             <Combobox onSelect={ async (address)=>{\n//                 setValue(address,false);\n//                 clearSuggestions();\n//                 try{\n//                     const results = await getGeocode({address});\n//                     const {lat, lng} = await getLatLng(results[0]);\n//                     props.panTo({lat,lng});\n//                 }catch(err){\n//                     console.log(err);\n//                 }\n//                 }}>\n//                 <ComboboxInput \n//                     value={value} \n//                     onChange={(e)=>{setValue(e.target.value);}} \n//                     disabled={!ready}\n//                     placeholder=\"Enter an address\"\n//                     />\n//                     <ComboboxPopover>\n//                         <ComboboxList>\n//                         {status===\"OK\" && data.map(({id,description})=>(\n//                             <ComboboxOption key={id} value={description}/>\n//                         ))}\n//                        </ComboboxList>\n//                     </ComboboxPopover>\n//             </Combobox>\n//         </div>\n//     )\n// }\n\nconst Locate = props => {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        props.panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: compass,\n    alt: \"compass - locate me\",\n    style: {\n      width: \"40px\",\n      height: \"40px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }));\n};\n\nclass RideMap extends Component {\n  constructor(props) {\n    super(props);\n    this.setMarker = this.setMarker.bind(this); // this.onMapLoad = this.onMapLoad.bind(this);\n\n    this.panTo = this.panTo.bind(this);\n    this.state = {\n      markers: [],\n      selected: null,\n      map: {},\n      rides: []\n    };\n  } // componentDidMount(){\n  //     axios.get('/api/rides')\n  //         .then(response =>{this.setState({rides: response.data});\n  //         })\n  //         .catch((error)=> console.log(error));\n  // }\n  // onMapLoad(map){\n  //     this.setState({\n  //         map:map\n  //     })\n  // }\n\n\n  setMarker(e) {\n    const lat = e.latLng.lat();\n    const lng = e.latLng.lng();\n    this.setState({\n      markers: [...this.state.markers, {\n        lat: lat,\n        lng: lng,\n        time: new Date()\n      }]\n    });\n  }\n\n  panTo({\n    lat,\n    lng\n  }) {\n    this.state.map.panTo({\n      lat,\n      lng\n    });\n    this.state.map.setZoom(14);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LoadScript, {\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n      libraries: libraries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Locate, {\n      panTo: this.panTo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }, \"Rides\"), /*#__PURE__*/React.createElement(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 8,\n      center: center,\n      options: options,\n      onClick: event => this.setMarker(event),\n      onLoad: this.onMapLoad,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }, this.state.markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n      key: marker.time.toISOString(),\n      position: {\n        lat: marker.lat,\n        lng: marker.lng\n      },\n      onClick: () => this.setState({\n        selected: marker\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 29\n      }\n    })), this.state.selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: this.state.selected.lat,\n        lng: this.state.selected.lng\n      },\n      onCloseClick: this.setState({\n        selected: null\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 33\n      }\n    }, \"Rides Here\"))) : null)));\n  }\n\n}\n\nexport default RideMap;","map":{"version":3,"sources":["C:/Users/Ricky/Documents/CS Stuff/Projects/RideBuddies/client/src/components/pages/map.component.js"],"names":["React","Component","axios","GoogleMap","Marker","InfoWindow","LoadScript","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","mapContainerStyle","height","width","center","lat","lng","options","disableDefaultUI","zoomControl","libraries","Locate","props","navigator","geolocation","getCurrentPosition","position","panTo","coords","latitude","longitude","compass","RideMap","constructor","setMarker","bind","state","markers","selected","map","rides","e","latLng","setState","time","Date","setZoom","render","process","env","REACT_APP_GOOGLE_KEY","event","onMapLoad","marker","toISOString"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACIC,SADJ,EAEIC,MAFJ,EAGIC,UAHJ,EAIIC,UAJJ,QAKM,wBALN;AAOA,OAAOC,qBAAP,IACIC,UADJ,EAEIC,SAFJ,QAGO,yBAHP;AAKA,SACIC,QADJ,EAEIC,aAFJ,EAGIC,eAHJ,EAIIC,YAJJ,EAKIC,cALJ,QAMS,iBANT;AAOE,OAAO,4BAAP;;AAIF,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,MAAM,EAAE,OADc;AAEtBC,EAAAA,KAAK,EAAE;AAFe,CAA1B;AAKA,MAAMC,MAAM,GAAG;AACXC,EAAAA,GAAG,EAAC,SADO;AAEXC,EAAAA,GAAG,EAAC,CAAC;AAFM,CAAf;AAKA,MAAMC,OAAO,GAAG;AACZC,EAAAA,gBAAgB,EAAC,IADL;AAEZC,EAAAA,WAAW,EAAC;AAFA,CAAhB;AAKA,MAAMC,SAAS,GAAG,CAAC,QAAD,CAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAGA,MAAMC,MAAM,GAAIC,KAAK,IAAG;AACrB,sBAAO;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAE,MAAI;AAC3CC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACKC,QADoC,IACzB;AACPJ,QAAAA,KAAK,CAACK,KAAN,CAAY;AACRZ,UAAAA,GAAG,EAAEW,QAAQ,CAACE,MAAT,CAAgBC,QADb;AAERb,UAAAA,GAAG,EAACU,QAAQ,CAACE,MAAT,CAAgBE;AAFZ,SAAZ;AAIH,OANN,EAOM,MAAI,IAPV;AASH,KAVM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAWE;AAAK,IAAA,GAAG,EAAEC,OAAV;AAAmB,IAAA,GAAG,EAAC,qBAAvB;AAA6C,IAAA,KAAK,EAAE;AAAClB,MAAAA,KAAK,EAAC,MAAP;AAAeD,MAAAA,MAAM,EAAC;AAAtB,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CAAP;AAaF,CAdD;;AAeA,MAAMoB,OAAN,SAAsBnC,SAAtB,CAA+B;AAE3BoC,EAAAA,WAAW,CAACX,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKY,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB,CAFc,CAGd;;AACA,SAAKR,KAAL,GAAa,KAAKA,KAAL,CAAWQ,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,KAAL,GAAa;AACGC,MAAAA,OAAO,EAAC,EADX;AAEGC,MAAAA,QAAQ,EAAC,IAFZ;AAGGC,MAAAA,GAAG,EAAC,EAHP;AAIGC,MAAAA,KAAK,EAAC;AAJT,KAAb;AAMH,GAb0B,CAe3B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEAN,EAAAA,SAAS,CAACO,CAAD,EAAG;AACR,UAAM1B,GAAG,GAAG0B,CAAC,CAACC,MAAF,CAAS3B,GAAT,EAAZ;AACA,UAAMC,GAAG,GAAGyB,CAAC,CAACC,MAAF,CAAS1B,GAAT,EAAZ;AAEA,SAAK2B,QAAL,CAAc;AACVN,MAAAA,OAAO,EAAC,CAAC,GAAG,KAAKD,KAAL,CAAWC,OAAf,EAAuB;AACnBtB,QAAAA,GAAG,EAACA,GADe;AAEnBC,QAAAA,GAAG,EAACA,GAFe;AAGnB4B,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAHa,OAAvB;AADE,KAAd;AAOH;;AAEFlB,EAAAA,KAAK,CAAC;AAACZ,IAAAA,GAAD;AAAKC,IAAAA;AAAL,GAAD,EAAW;AACX,SAAKoB,KAAL,CAAWG,GAAX,CAAeZ,KAAf,CAAqB;AAACZ,MAAAA,GAAD;AAAKC,MAAAA;AAAL,KAArB;AACA,SAAKoB,KAAL,CAAWG,GAAX,CAAeO,OAAf,CAAuB,EAAvB;AACJ;;AACAC,EAAAA,MAAM,GAAE;AAEJ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AACI,MAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC,oBADlC;AAEI,MAAA,SAAS,EAAE9B,SAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAKO,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPJ,eAQI,oBAAC,SAAD;AAAW,MAAA,iBAAiB,EAAEhB,iBAA9B;AACI,MAAA,IAAI,EAAE,CADV;AAEI,MAAA,MAAM,EAAEG,MAFZ;AAGI,MAAA,OAAO,EAAEG,OAHb;AAII,MAAA,OAAO,EAAEkC,KAAK,IAAE,KAAKjB,SAAL,CAAeiB,KAAf,CAJpB;AAKI,MAAA,MAAM,EAAE,KAAKC,SALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOK,KAAKhB,KAAL,CAAWC,OAAX,CAAmBE,GAAnB,CAAuBc,MAAM,iBAC1B,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,MAAM,CAACT,IAAP,CAAYU,WAAZ,EAAb;AACQ,MAAA,QAAQ,EAAE;AAACvC,QAAAA,GAAG,EAACsC,MAAM,CAACtC,GAAZ;AAAgBC,QAAAA,GAAG,EAACqC,MAAM,CAACrC;AAA3B,OADlB;AAEQ,MAAA,OAAO,EAAE,MAAI,KAAK2B,QAAL,CAAc;AAACL,QAAAA,QAAQ,EAACe;AAAV,OAAd,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAPL,EAYK,KAAKjB,KAAL,CAAWE,QAAX,gBACA,oBAAC,UAAD;AACG,MAAA,QAAQ,EAAE;AAACvB,QAAAA,GAAG,EAAC,KAAKqB,KAAL,CAAWE,QAAX,CAAoBvB,GAAzB;AAA6BC,QAAAA,GAAG,EAAC,KAAKoB,KAAL,CAAWE,QAAX,CAAoBtB;AAArD,OADb;AAEG,MAAA,YAAY,EAAE,KAAK2B,QAAL,CAAc;AAACL,QAAAA,QAAQ,EAAC;AAAV,OAAd,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CAHH,CADA,GAOc,IAnBnB,CARJ,CADJ,CADJ;AAoCH;;AAnF0B;;AAyF/B,eAAeN,OAAf","sourcesContent":["import React,{Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    GoogleMap,\r\n    Marker,\r\n    InfoWindow,\r\n    LoadScript,\r\n}from \"@react-google-maps/api\";\r\n\r\nimport usePlacesAutocomplete,{\r\n    getGeocode,\r\n    getLatLng,\r\n} from \"use-places-autocomplete\";\r\n\r\nimport {\r\n    Combobox,\r\n    ComboboxInput,\r\n    ComboboxPopover,\r\n    ComboboxList,\r\n    ComboboxOption,\r\n  } from \"@reach/combobox\";\r\n  import \"@reach/combobox/styles.css\";\r\n\r\n\r\nimport compass from \"../../img/compass.svg\";\r\nconst mapContainerStyle = {\r\n    height: \"100vh\",\r\n    width: \"100vw\",\r\n}\r\n\r\nconst center = {\r\n    lat:37.774929,\r\n    lng:-122.419418,\r\n}\r\n\r\nconst options = {\r\n    disableDefaultUI:true,\r\n    zoomControl:true,\r\n}\r\n\r\nconst libraries = [\"places\"];\r\n\r\n// const PlacesAutocomplete  = props =>{\r\n//     const{\r\n//         ready,\r\n//         value,\r\n//         suggestions:{status,data},\r\n//         setValue,\r\n//         clearSuggestions,\r\n//     } = usePlacesAutocomplete({\r\n//         requestOptions:{\r\n//             location:{ lat:()=>37.774929,lng:()=>-122.419418},\r\n//             radius:200*1000,\r\n//         },\r\n//     });\r\n//     return (\r\n//         <div className='search'>\r\n//             <Combobox onSelect={ async (address)=>{\r\n//                 setValue(address,false);\r\n//                 clearSuggestions();\r\n\r\n//                 try{\r\n//                     const results = await getGeocode({address});\r\n//                     const {lat, lng} = await getLatLng(results[0]);\r\n//                     props.panTo({lat,lng});\r\n//                 }catch(err){\r\n//                     console.log(err);\r\n//                 }\r\n                \r\n//                 }}>\r\n//                 <ComboboxInput \r\n//                     value={value} \r\n//                     onChange={(e)=>{setValue(e.target.value);}} \r\n//                     disabled={!ready}\r\n//                     placeholder=\"Enter an address\"\r\n//                     />\r\n//                     <ComboboxPopover>\r\n//                         <ComboboxList>\r\n//                         {status===\"OK\" && data.map(({id,description})=>(\r\n//                             <ComboboxOption key={id} value={description}/>\r\n//                         ))}\r\n//                        </ComboboxList>\r\n//                     </ComboboxPopover>\r\n//             </Combobox>\r\n//         </div>\r\n        \r\n//     )\r\n// }\r\n\r\n\r\nconst Locate  = props =>{\r\n   return <button className=\"locate\" onClick={()=>{\r\n       navigator.geolocation.getCurrentPosition((\r\n            position)=>{\r\n                props.panTo({\r\n                    lat: position.coords.latitude,\r\n                    lng:position.coords.longitude\r\n                });\r\n            }\r\n            ,()=>null\r\n        );\r\n   }}>\r\n            <img src={compass} alt=\"compass - locate me\" style={{width:\"40px\", height:\"40px\"}}></img>\r\n          </button>\r\n}\r\nclass RideMap extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.setMarker = this.setMarker.bind(this);\r\n        // this.onMapLoad = this.onMapLoad.bind(this);\r\n        this.panTo = this.panTo.bind(this);\r\n        this.state = {\r\n                        markers:[],\r\n                        selected:null,\r\n                        map:{},\r\n                        rides:[],\r\n                    };\r\n    }\r\n\r\n    // componentDidMount(){\r\n    //     axios.get('/api/rides')\r\n    //         .then(response =>{this.setState({rides: response.data});\r\n    //         })\r\n    //         .catch((error)=> console.log(error));\r\n    // }\r\n\r\n    // onMapLoad(map){\r\n    //     this.setState({\r\n    //         map:map\r\n    //     })\r\n    // }\r\n\r\n    setMarker(e){\r\n        const lat = e.latLng.lat();\r\n        const lng = e.latLng.lng();\r\n        \r\n        this.setState({\r\n            markers:[...this.state.markers,{\r\n                        lat:lat,\r\n                        lng:lng,\r\n                        time: new Date()}]\r\n        })\r\n        \r\n    }\r\n\r\n   panTo({lat,lng}){\r\n        this.state.map.panTo({lat,lng});\r\n        this.state.map.setZoom(14);\r\n   }\r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <LoadScript \r\n                    googleMapsApiKey={process.env.REACT_APP_GOOGLE_KEY}\r\n                    libraries={libraries}\r\n                >\r\n                    {/* <PlacesAutocomplete panTo={this.panTo}/> */}\r\n                    <Locate panTo={this.panTo}/>\r\n\r\n                    <h2>Rides</h2>\r\n                    <GoogleMap mapContainerStyle={mapContainerStyle} \r\n                        zoom={8}\r\n                        center={center}\r\n                        options={options}\r\n                        onClick={event=>this.setMarker(event)}\r\n                        onLoad={this.onMapLoad}\r\n                    >\r\n                        {this.state.markers.map(marker => \r\n                            <Marker key={marker.time.toISOString()} \r\n                                    position={{lat:marker.lat,lng:marker.lng}}\r\n                                    onClick={()=>this.setState({selected:marker})}\r\n                                    />)}\r\n                        {this.state.selected? \r\n                        (<InfoWindow \r\n                            position={{lat:this.state.selected.lat,lng:this.state.selected.lng}} \r\n                            onCloseClick={this.setState({selected:null})}>\r\n                            <div>\r\n                                <h3>Rides Here</h3>\r\n                            </div>\r\n                        </InfoWindow>):null}\r\n                    </GoogleMap>\r\n                </LoadScript>\r\n            </div>\r\n           \r\n            \r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default RideMap;"]},"metadata":{},"sourceType":"module"}