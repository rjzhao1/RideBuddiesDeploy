{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ricky\\\\Documents\\\\CS Stuff\\\\Projects\\\\RideBuddies\\\\client\\\\src\\\\components\\\\pages\\\\map.component.js\";\nimport React, { Component } from 'react';\nimport { GoogleMap, Marker, InfoWindow, LoadScript } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport Search from 'antd/lib/input/Search';\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\"\n};\nconst center = {\n  lat: 37.774929,\n  lng: -122.419418\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst libraries = [\"places\"];\n\nconst PlacesAutocomplete = () => {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestion\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 37.774929,\n        lng: () => -122.419418\n      },\n      radius: 200 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: address => {\n      console.log(address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disabled: !ready,\n    placeholder: \"Enter an address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }));\n};\n\nclass RideMap extends Component {\n  constructor(props) {\n    super(props);\n    this.setMarker = this.setMarker.bind(this);\n    this.state = {\n      markers: [],\n      selected: null\n    };\n  }\n\n  setMarker(e) {\n    const lat = e.latLng.lat();\n    const lng = e.latLng.lng();\n    this.setState({\n      markers: [...this.state.markers, {\n        lat: lat,\n        lng: lng,\n        time: new Date()\n      }]\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LoadScript, {\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n      libraries: libraries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, \"Rides\"), /*#__PURE__*/React.createElement(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 8,\n      center: center,\n      options: options,\n      onClick: event => this.setMarker(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, this.state.markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n      key: marker.time.toISOString(),\n      position: {\n        lat: marker.lat,\n        lng: marker.lng\n      },\n      onClick: () => this.setState({\n        selected: marker\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    })), this.state.selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: this.state.selected.lat,\n        lng: this.state.selected.lng\n      },\n      onCloseClick: this.setState({\n        selected: null\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 33\n      }\n    }, \"Rides Here\"))) : null)));\n  }\n\n}\n\nexport default RideMap;","map":{"version":3,"sources":["C:/Users/Ricky/Documents/CS Stuff/Projects/RideBuddies/client/src/components/pages/map.component.js"],"names":["React","Component","GoogleMap","Marker","InfoWindow","LoadScript","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","Search","mapContainerStyle","height","width","center","lat","lng","options","disableDefaultUI","zoomControl","libraries","PlacesAutocomplete","ready","value","suggestions","status","data","setValue","clearSuggestion","requestOptions","location","radius","address","console","log","e","target","RideMap","constructor","props","setMarker","bind","state","markers","selected","latLng","setState","time","Date","render","process","env","REACT_APP_GOOGLE_KEY","event","map","marker","toISOString"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,SACIC,SADJ,EAEIC,MAFJ,EAGIC,UAHJ,EAIIC,UAJJ,QAKM,wBALN;AAOA,OAAOC,qBAAP,IACIC,UADJ,EAEIC,SAFJ,QAGO,yBAHP;AAKA,SACIC,QADJ,EAEIC,aAFJ,EAGIC,eAHJ,EAIIC,YAJJ,EAKIC,cALJ,QAMS,iBANT;AAOE,OAAO,4BAAP;AACF,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,MAAM,EAAE,OADc;AAEtBC,EAAAA,KAAK,EAAE;AAFe,CAA1B;AAKA,MAAMC,MAAM,GAAG;AACXC,EAAAA,GAAG,EAAC,SADO;AAEXC,EAAAA,GAAG,EAAC,CAAC;AAFM,CAAf;AAKA,MAAMC,OAAO,GAAG;AACZC,EAAAA,gBAAgB,EAAC,IADL;AAEZC,EAAAA,WAAW,EAAC;AAFA,CAAhB;AAKA,MAAMC,SAAS,GAAG,CAAC,QAAD,CAAlB;;AAGA,MAAMC,kBAAkB,GAAI,MAAK;AAC7B,QAAK;AACDC,IAAAA,KADC;AAEDC,IAAAA,KAFC;AAGDC,IAAAA,WAAW,EAAC;AAACC,MAAAA,MAAD;AAAQC,MAAAA;AAAR,KAHX;AAIDC,IAAAA,QAJC;AAKDC,IAAAA;AALC,MAMD1B,qBAAqB,CAAC;AACtB2B,IAAAA,cAAc,EAAC;AACXC,MAAAA,QAAQ,EAAC;AAAEf,QAAAA,GAAG,EAAC,MAAI,SAAV;AAAoBC,QAAAA,GAAG,EAAC,MAAI,CAAC;AAA7B,OADE;AAEXe,MAAAA,MAAM,EAAC,MAAI;AAFA;AADO,GAAD,CANzB;AAYA,sBAAO,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAGC,OAAD,IAAW;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAAsB,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH,oBAAC,aAAD;AACI,IAAA,KAAK,EAAET,KADX;AAEI,IAAA,QAAQ,EAAGY,CAAD,IAAK;AAACR,MAAAA,QAAQ,CAACQ,CAAC,CAACC,MAAF,CAASb,KAAV,CAAR;AAA0B,KAF9C;AAGI,IAAA,QAAQ,EAAE,CAACD,KAHf;AAII,IAAA,WAAW,EAAC,kBAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CAAP;AAQH,CArBD;;AAuBA,MAAMe,OAAN,SAAsBxC,SAAtB,CAA+B;AAC3ByC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKC,KAAL,GAAa;AACGC,MAAAA,OAAO,EAAC,EADX;AAEGC,MAAAA,QAAQ,EAAC;AAFZ,KAAb;AAIH;;AAEDJ,EAAAA,SAAS,CAACL,CAAD,EAAG;AACR,UAAMpB,GAAG,GAAGoB,CAAC,CAACU,MAAF,CAAS9B,GAAT,EAAZ;AACA,UAAMC,GAAG,GAAGmB,CAAC,CAACU,MAAF,CAAS7B,GAAT,EAAZ;AACA,SAAK8B,QAAL,CAAc;AACVH,MAAAA,OAAO,EAAC,CAAC,GAAG,KAAKD,KAAL,CAAWC,OAAf,EAAuB;AACnB5B,QAAAA,GAAG,EAACA,GADe;AAEnBC,QAAAA,GAAG,EAACA,GAFe;AAGnB+B,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAHa,OAAvB;AADE,KAAd;AAOH;;AAEDC,EAAAA,MAAM,GAAE;AAEJ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AACI,MAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC,oBADlC;AAEI,MAAA,SAAS,EAAEhC,SAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANJ,eAOI,oBAAC,SAAD;AAAW,MAAA,iBAAiB,EAAET,iBAA9B;AACI,MAAA,IAAI,EAAE,CADV;AAEI,MAAA,MAAM,EAAEG,MAFZ;AAGI,MAAA,OAAO,EAAEG,OAHb;AAII,MAAA,OAAO,EAAEoC,KAAK,IAAE,KAAKb,SAAL,CAAea,KAAf,CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMK,KAAKX,KAAL,CAAWC,OAAX,CAAmBW,GAAnB,CAAuBC,MAAM,iBAC1B,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,MAAM,CAACR,IAAP,CAAYS,WAAZ,EAAb;AACQ,MAAA,QAAQ,EAAE;AAACzC,QAAAA,GAAG,EAACwC,MAAM,CAACxC,GAAZ;AAAgBC,QAAAA,GAAG,EAACuC,MAAM,CAACvC;AAA3B,OADlB;AAEQ,MAAA,OAAO,EAAE,MAAI,KAAK8B,QAAL,CAAc;AAACF,QAAAA,QAAQ,EAACW;AAAV,OAAd,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CANL,EAWK,KAAKb,KAAL,CAAWE,QAAX,gBACA,oBAAC,UAAD;AACG,MAAA,QAAQ,EAAE;AAAC7B,QAAAA,GAAG,EAAC,KAAK2B,KAAL,CAAWE,QAAX,CAAoB7B,GAAzB;AAA6BC,QAAAA,GAAG,EAAC,KAAK0B,KAAL,CAAWE,QAAX,CAAoB5B;AAArD,OADb;AAEG,MAAA,YAAY,EAAE,KAAK8B,QAAL,CAAc;AAACF,QAAAA,QAAQ,EAAC;AAAV,OAAd,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CAHH,CADA,GAOc,IAlBnB,CAPJ,CADJ,CADJ;AAkCH;;AA1D0B;;AAgE/B,eAAeP,OAAf","sourcesContent":["import React,{Component} from 'react';\r\nimport {\r\n    GoogleMap,\r\n    Marker,\r\n    InfoWindow,\r\n    LoadScript,\r\n}from \"@react-google-maps/api\";\r\n\r\nimport usePlacesAutocomplete,{\r\n    getGeocode,\r\n    getLatLng,\r\n} from \"use-places-autocomplete\";\r\n\r\nimport {\r\n    Combobox,\r\n    ComboboxInput,\r\n    ComboboxPopover,\r\n    ComboboxList,\r\n    ComboboxOption,\r\n  } from \"@reach/combobox\";\r\n  import \"@reach/combobox/styles.css\";\r\nimport Search from 'antd/lib/input/Search';\r\n\r\nconst mapContainerStyle = {\r\n    height: \"100vh\",\r\n    width: \"100vw\",\r\n}\r\n\r\nconst center = {\r\n    lat:37.774929,\r\n    lng:-122.419418,\r\n}\r\n\r\nconst options = {\r\n    disableDefaultUI:true,\r\n    zoomControl:true,\r\n}\r\n\r\nconst libraries = [\"places\"];\r\n\r\n\r\nconst PlacesAutocomplete  = () =>{\r\n    const{\r\n        ready,\r\n        value,\r\n        suggestions:{status,data},\r\n        setValue,\r\n        clearSuggestion,\r\n    } = usePlacesAutocomplete({\r\n        requestOptions:{\r\n            location:{ lat:()=>37.774929,lng:()=>-122.419418},\r\n            radius:200*1000,\r\n        },\r\n    });\r\n    return <Combobox onSelect={(address)=>{console.log(address);}}>\r\n        <ComboboxInput \r\n            value={value} \r\n            onChange={(e)=>{setValue(e.target.value);}} \r\n            disabled={!ready}\r\n            placeholder=\"Enter an address\"\r\n            />\r\n    </Combobox>\r\n}\r\n\r\nclass RideMap extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.setMarker = this.setMarker.bind(this);\r\n        this.state = {\r\n                        markers:[],\r\n                        selected:null,\r\n                    };\r\n    }\r\n\r\n    setMarker(e){\r\n        const lat = e.latLng.lat();\r\n        const lng = e.latLng.lng();\r\n        this.setState({\r\n            markers:[...this.state.markers,{\r\n                        lat:lat,\r\n                        lng:lng,\r\n                        time: new Date()}]\r\n        })\r\n        \r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <LoadScript \r\n                    googleMapsApiKey={process.env.REACT_APP_GOOGLE_KEY}\r\n                    libraries={libraries}\r\n                >\r\n                    <PlacesAutocomplete />\r\n                    {/* {this.Search()} */}\r\n                    <h2>Rides</h2>\r\n                    <GoogleMap mapContainerStyle={mapContainerStyle} \r\n                        zoom={8}\r\n                        center={center}\r\n                        options={options}\r\n                        onClick={event=>this.setMarker(event)}\r\n                    >\r\n                        {this.state.markers.map(marker => \r\n                            <Marker key={marker.time.toISOString()} \r\n                                    position={{lat:marker.lat,lng:marker.lng}}\r\n                                    onClick={()=>this.setState({selected:marker})}\r\n                                    />)}\r\n                        {this.state.selected? \r\n                        (<InfoWindow \r\n                            position={{lat:this.state.selected.lat,lng:this.state.selected.lng}} \r\n                            onCloseClick={this.setState({selected:null})}>\r\n                            <div>\r\n                                <h3>Rides Here</h3>\r\n                            </div>\r\n                        </InfoWindow>):null}\r\n                    </GoogleMap>\r\n                </LoadScript>\r\n            </div>\r\n           \r\n            \r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default RideMap;"]},"metadata":{},"sourceType":"module"}