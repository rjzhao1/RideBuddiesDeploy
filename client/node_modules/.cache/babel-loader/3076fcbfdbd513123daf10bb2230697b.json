{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fillRef = fillRef;\nexports.composeRef = composeRef;\nexports.supportRef = supportRef;\n\nvar _reactIs = require(\"react-is\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction fillRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else if (_typeof(ref) === 'object' && ref && 'current' in ref) {\n    ref.current = node;\n  }\n}\n/**\n * Merge refs into one ref function to support ref passing.\n */\n\n\nfunction composeRef() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return function (node) {\n    refs.forEach(function (ref) {\n      fillRef(ref, node);\n    });\n  };\n}\n\nfunction supportRef(nodeOrComponent) {\n  var type = (0, _reactIs.isMemo)(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type; // Function component node\n\n  if (type && type.prototype && !type.prototype.render) {\n    return false;\n  } // Class component\n\n\n  if (typeof nodeOrComponent === 'function' && nodeOrComponent.prototype && !nodeOrComponent.prototype.render) {\n    return false;\n  }\n\n  return true;\n}\n/* eslint-enable */","map":{"version":3,"sources":["C:/Users/Ricky/Documents/CS Stuff/Projects/RideBuddies/client/node_modules/antd/node_modules/rc-util/lib/ref.js"],"names":["Object","defineProperty","exports","value","fillRef","composeRef","supportRef","_reactIs","require","_typeof","obj","Symbol","iterator","constructor","prototype","ref","node","current","_len","arguments","length","refs","Array","_key","forEach","nodeOrComponent","type","isMemo","render"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAF,OAAO,CAACG,UAAR,GAAqBA,UAArB;AACAH,OAAO,CAACI,UAAR,GAAqBA,UAArB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,SAASN,OAAT,CAAiBW,GAAjB,EAAsBC,IAAtB,EAA4B;AAC1B,MAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,IAAAA,GAAG,CAACC,IAAD,CAAH;AACD,GAFD,MAEO,IAAIP,OAAO,CAACM,GAAD,CAAP,KAAiB,QAAjB,IAA6BA,GAA7B,IAAoC,aAAaA,GAArD,EAA0D;AAC/DA,IAAAA,GAAG,CAACE,OAAJ,GAAcD,IAAd;AACD;AACF;AACD;;;;;AAKA,SAASX,UAAT,GAAsB;AACpB,OAAK,IAAIa,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,IAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,SAAO,UAAUP,IAAV,EAAgB;AACrBK,IAAAA,IAAI,CAACG,OAAL,CAAa,UAAUT,GAAV,EAAe;AAC1BX,MAAAA,OAAO,CAACW,GAAD,EAAMC,IAAN,CAAP;AACD,KAFD;AAGD,GAJD;AAKD;;AAED,SAASV,UAAT,CAAoBmB,eAApB,EAAqC;AACnC,MAAIC,IAAI,GAAG,CAAC,GAAGnB,QAAQ,CAACoB,MAAb,EAAqBF,eAArB,IAAwCA,eAAe,CAACC,IAAhB,CAAqBA,IAA7D,GAAoED,eAAe,CAACC,IAA/F,CADmC,CACkE;;AAErG,MAAIA,IAAI,IAAIA,IAAI,CAACZ,SAAb,IAA0B,CAACY,IAAI,CAACZ,SAAL,CAAec,MAA9C,EAAsD;AACpD,WAAO,KAAP;AACD,GALkC,CAKjC;;;AAGF,MAAI,OAAOH,eAAP,KAA2B,UAA3B,IAAyCA,eAAe,CAACX,SAAzD,IAAsE,CAACW,eAAe,CAACX,SAAhB,CAA0Bc,MAArG,EAA6G;AAC3G,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fillRef = fillRef;\nexports.composeRef = composeRef;\nexports.supportRef = supportRef;\n\nvar _reactIs = require(\"react-is\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction fillRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else if (_typeof(ref) === 'object' && ref && 'current' in ref) {\n    ref.current = node;\n  }\n}\n/**\n * Merge refs into one ref function to support ref passing.\n */\n\n\nfunction composeRef() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return function (node) {\n    refs.forEach(function (ref) {\n      fillRef(ref, node);\n    });\n  };\n}\n\nfunction supportRef(nodeOrComponent) {\n  var type = (0, _reactIs.isMemo)(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type; // Function component node\n\n  if (type && type.prototype && !type.prototype.render) {\n    return false;\n  } // Class component\n\n\n  if (typeof nodeOrComponent === 'function' && nodeOrComponent.prototype && !nodeOrComponent.prototype.render) {\n    return false;\n  }\n\n  return true;\n}\n/* eslint-enable */"]},"metadata":{},"sourceType":"script"}